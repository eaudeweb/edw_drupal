<?php

/**
 * @file
 * Basic module file for EDW Event module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\edw_event_agenda\Form\MeetingAgendaForm;
use Drupal\edw_event_agenda\Form\MeetingDocumentForm;
use Drupal\edw_event\Form\MeetingSectionForm;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function edw_event_form_entity_clone_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node instanceof NodeInterface || $node->bundle() != 'event') {
    return;
  }

  /** @var \Drupal\edw_event\Services\MeetingService $meetingService */
  $meetingService = \Drupal::service('edw_event.meeting.service');
  $sections = $meetingService->getAllMeetingSections($node, FALSE);
  if (!$sections) {
    return;
  }

  $form['meeting_sections'] = [
    '#type' => 'checkbox',
    '#title' => t('Clone meeting sections.'),
    '#description' => t('If the cloned entity should be saved with all tabs related.'),
    '#default_value' => TRUE,
  ];

  $form['meeting_sections_status'] = [
    '#type' => 'fieldset',
    '#title' => t('Select what sections you want to clone as published'),
    '#states' => [
      'visible' => [
        ':input[name="meeting_sections"]' => ['checked' => TRUE],
      ],
    ],
  ];

  foreach ($sections as $section) {
    $form['meeting_sections_status'][$section->id()] = [
      '#type' => 'checkbox',
      '#title' => $section->label(),
      '#default_value' => FALSE,
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function edw_event_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $classResolver = \Drupal::service('class_resolver');
  if (\Drupal::moduleHandler()->moduleExists('edw_event_agenda')) {
    if ($form_id == 'media_document_add_form') {
      $classResolver->getInstanceFromDefinition(MeetingDocumentForm::class)
        ->alter($form, $form_state);
    }

    if ($form_id == 'taxonomy_term_event_agendas_form') {
      $classResolver->getInstanceFromDefinition(MeetingAgendaForm::class)
        ->alter($form, $form_state);
    }
  }

  if ($form_id == 'node_event_section_form') {
    $classResolver->getInstanceFromDefinition(MeetingSectionForm::class)
      ->alter($form, $form_state);
  }
}
