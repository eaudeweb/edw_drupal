<?php

/**
 * @file
 * Basic module file for EDW Event Agenda module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function edw_event_agenda_form_entity_clone_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node instanceof NodeInterface || $node->bundle() != 'event') {
    return;
  }

  if (!isset($form['referenced'])) {
    $form['referenced'] = [
      '#tree' => TRUE,
    ];
  }

  /** @var \Drupal\edw_event_agenda\Services\MeetingAgendaService $agendaService */
  $agendaService = \Drupal::service('edw_event_agenda.meeting.agenda.service');
  $agendas = $agendaService->getAllMeetingAgendas($node, FALSE);
  if (!$agendas) {
    return;
  }
  $form['referenced']['meeting_agenda'] = [
    '#type' => 'fieldset',
    '#title' => t('Clone meeting agenda'),
  ];
  foreach ($agendas as $agenda) {
    if ($agenda->hasField('field_is_default_agenda')
      && !$agenda->get('field_is_default_agenda')->isEmpty()
      && $agenda->get('field_is_default_agenda')->value) {
      $form['referenced']['meeting_agenda'][$agenda->id()] = [
        '#type' => 'checkbox',
        '#title' => $agenda->getName(),
        '#default_value' => TRUE,
        '#disabled' => TRUE,
        '#description' => t('Default agendas are always cloned.'),
      ];
      continue;
    }
    $form['referenced']['meeting_agenda'][$agenda->id()] = [
      '#type' => 'checkbox',
      '#title' => $agenda->getName(),
      '#default_value' => TRUE,
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function edw_event_agenda_node_delete(NodeInterface $node) {
  if ($node->bundle() != 'event') {
    return;
  }
  
  // Delete agenda items.
  /** @var \Drupal\edw_event_agenda\Services\MeetingAgendaService $meetingService */
  $meetingService = \Drupal::service('edw_event_agenda.meeting.agenda.service');
  $entities = $meetingService->getAllMeetingSections($node, FALSE);
  foreach ($entities as $entity) {
    $entity->delete();
    \Drupal::logger('term')
      ->info(t('The @entity-type %label has been deleted.', [
        '@entity-type' => $entity->getEntityType()->getSingularLabel(),
        '%label' => $entity->label() ?? $entity->id(),
      ]));
  }
}
