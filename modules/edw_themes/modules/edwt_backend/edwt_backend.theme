<?php

use Drupal\Component\Serialization\Json;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;

/**
 * @file
 * edwt_backend.theme
 */

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function edwt_backend_theme_suggestions_views_view_table_alter(array &$suggestions, array $variables): void {
  $view = $variables['view'];

  // Add an extra check because the view could have been deleted.
  if (!$view instanceof ViewExecutable) {
    return;
  }
  $suggestions[] = 'views_view_table__' . $view->id();
  $suggestions[] = 'views_view_table__' . $view->id() . '__' . $view->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function edwt_backend_theme_suggestions_views_view_alter(array &$suggestions, array $variables): void {
  $view = $variables['view'];

  // Add an extra check because the view could have been deleted.
  if (!$view instanceof ViewExecutable) {
    return;
  }
  $suggestions[] = 'views_view__' . $view->id();
  $suggestions[] = 'views_view__' . $view->id() . '__' . $view->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function edwt_backend_theme_suggestions_form_alter(array &$suggestions, array $variables): void {
  $routeMatch = \Drupal::routeMatch();
  if (!empty($routeMatch->getParameter('view_id'))) {
    $parameters = $routeMatch->getParameters()->all();
    array_unshift($suggestions, 'form__views_form_' . $parameters['view_id'] . '_' . $parameters['display_id']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for views table templates.
 */
function edwt_backend_preprocess_views_view_table(&$variables) {
  // Functionality specific only for events
  if (\Drupal::moduleHandler()->moduleExists('edw_event')) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = $variables['view'];
    /** @var \Drupal\edw_event\Services\MeetingDocumentsService $meetingDocumentsService */
    $meetingDocumentsService = \Drupal::service('edw_event.meeting.documents.service');
    if ($view->id() == 'event_agendas'
      && $view->current_display == 'pre_session_order'
      && isset($variables['result'])) {
      $firstResult = reset($variables['result']);
      $phase = str_replace('_order', '', $view->current_display);
      $variables['add_document'] = $meetingDocumentsService->addDocumentModal($firstResult->_entity, $phase);
      $variables['group_id'] = $firstResult->_entity->id();
    }
    if ($view->id() == 'documents'
      && $view->current_display == 'in_session_order'
      && isset($variables['result'])) {
      $firstResult = reset($variables['result']);
      $phase = str_replace('_order', '', $view->current_display);
      $variables['add_document'] = $meetingDocumentsService->addDocumentModal($firstResult->_relationship_entities['field_agenda'], $phase);
      $variables['group_id'] = $firstResult->_relationship_entities['field_agenda']->id();
    }
    if ($view->id() == 'documents'
      && $view->current_display == 'in_session_order_by_document_type'
      && isset($variables['result'])) {
      $event = \Drupal::routeMatch()->getParameter('node');
      $firstResult = reset($variables['result']);
      $url = Url::fromRoute('entity.media.add_form', [
        'media_type' => 'document',
        'nid' => $event->id(),
        'field_document_types' => $firstResult->_relationship_entities['field_document_types']->id(),
        'field_document_phase' => 'in_session',
      ]);
      $variables['add_document'] = $meetingDocumentsService->addButtonModal($url);
      $variables['group_id'] = $firstResult->_relationship_entities['field_document_types']->id();
    }
  }
}
